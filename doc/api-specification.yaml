openapi: 3.0.3
info:
  title: XLHealth AI心理咨询系统 API
  description: |
    XLHealth AI心理咨询系统的RESTful API接口文档

    ## 认证方式
    本API使用JWT Bearer Token进行身份认证：
    ```
    Authorization: Bearer <your-jwt-token>
    ```

    ## 错误码体系
    | 错误码 | HTTP状态码 | 描述 |
    |--------|------------|------|
    | 10001 | 400 | 请求参数错误 |
    | 10002 | 401 | 未授权访问 |
    | 10003 | 403 | 权限不足 |
    | 10004 | 404 | 资源不存在 |
    | 10005 | 409 | 资源冲突 |
    | 10006 | 422 | 数据验证失败 |
    | 50001 | 500 | 服务器内部错误 |
    | 50002 | 502 | 外部服务错误 |
    | 50003 | 503 | 服务暂时不可用 |

    ## 分页格式
    分页查询统一使用以下参数：
    - `page`: 页码，从1开始
    - `size`: 每页数量，默认20，最大100
    - `sort`: 排序字段，格式：`field,direction`（如：`createdAt,desc`）

    ## 接口标识说明
    - 🔄 表示幂等性接口（多次调用结果相同）
    - 🔐 表示敏感接口（涉及用户隐私或重要操作）
  version: 1.0.0
  contact:
    name: XLHealth 开发团队
    email: dev@xlhealth.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: 本地开发环境
  - url: https://api-dev.xlhealth.com
    description: 开发环境
  - url: https://api.xlhealth.com
    description: 生产环境

security:
  - BearerAuth: []

paths:
  # 用户认证相关接口
  /api/v1/auth/register:
    post:
      tags:
        - 用户认证
      summary: 用户注册
      description: 新用户注册账号
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - nickname
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: "^[a-zA-Z0-9_]+$"
                  description: 用户名，只能包含字母、数字和下划线
                  example: user001
                email:
                  type: string
                  format: email
                  maxLength: 100
                  description: 邮箱地址
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  maxLength: 128
                  description: 🔐 密码，至少8位
                  example: password123
                nickname:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: 用户昵称
                  example: 小明
            examples:
              normal:
                summary: 正常注册
                value:
                  username: user001
                  email: user@example.com
                  password: password123
                  nickname: 小明
      responses:
        "201":
          description: 注册成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 注册成功
                  value:
                    code: 0
                    message: 注册成功
                    data:
                      userId: 1001
                      username: user001
                      email: user@example.com
                      nickname: 小明
                      createdAt: "2024-01-01T10:00:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/v1/auth/login:
    post:
      tags:
        - 用户认证
      summary: 用户登录
      description: 🔐 用户登录获取访问令牌
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: 用户名或邮箱
                  example: user001
                password:
                  type: string
                  description: 🔐 密码
                  example: password123
      responses:
        "200":
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 登录成功
                  value:
                    code: 0
                    message: 登录成功
                    data:
                      accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      tokenType: Bearer
                      expiresIn: 86400
                      user:
                        id: 1001
                        username: user001
                        nickname: 小明
                        avatarUrl: /avatars/user001.jpg
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/v1/auth/logout:
    post:
      tags:
        - 用户认证
      summary: 用户登出
      description: 🔐 用户登出，使当前令牌失效
      responses:
        "200":
          description: 登出成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 登出成功
                  value:
                    code: 0
                    message: 登出成功
                    data: null
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # 用户管理相关接口
  /api/v1/users:
    post:
      tags:
        - 用户管理
      summary: 创建用户（管理员）
      description: 🔐 管理员创建新用户
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - nickname
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  description: 用户名，必填，3-50字符
                  example: newuser
                email:
                  type: string
                  format: email
                  maxLength: 100
                  description: 邮箱地址，必填，唯一
                  example: newuser@example.com
                password:
                  type: string
                  minLength: 8
                  maxLength: 128
                  description: 🔐 密码，必填，至少8位
                  example: newpassword123
                nickname:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: 用户昵称，必填
                  example: 新用户
                avatarUrl:
                  type: string
                  maxLength: 500
                  description: 头像URL，可选
                  example: /avatars/newuser.jpg
                status:
                  type: string
                  enum: [ACTIVE, INACTIVE, BANNED]
                  description: 账户状态，可选，默认ACTIVE
                  example: ACTIVE
      responses:
        "201":
          description: 用户创建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 创建成功
                  value:
                    code: 0
                    message: 用户创建成功
                    data:
                      id: 1002
                      username: newuser
                      email: newuser@example.com
                      nickname: 新用户
                      avatarUrl: /avatars/newuser.jpg
                      status: ACTIVE
                      createdAt: "2024-01-01T10:00:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/v1/users/profile:
    get:
      tags:
        - 用户管理
      summary: 获取当前用户信息
      description: 🔄 获取当前登录用户的详细信息
      responses:
        "200":
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 获取成功
                  value:
                    code: 0
                    message: 获取成功
                    data:
                      id: 1001
                      username: user001
                      email: user@example.com
                      nickname: 小明
                      avatarUrl: /avatars/user001.jpg
                      status: ACTIVE
                      createdAt: "2024-01-01T10:00:00Z"
                      lastLoginAt: "2024-01-01T15:30:00Z"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      tags:
        - 用户管理
      summary: 更新用户信息
      description: 🔐 更新当前用户的个人信息
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  minLength: 1
                  maxLength: 50
                  description: 用户昵称
                  example: 新昵称
                avatarUrl:
                  type: string
                  maxLength: 500
                  description: 头像URL
                  example: /avatars/new-avatar.jpg
                email:
                  type: string
                  format: email
                  maxLength: 100
                  description: 邮箱地址
                  example: newemail@example.com
      responses:
        "200":
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 更新成功
                  value:
                    code: 0
                    message: 更新成功
                    data:
                      id: 1001
                      username: user001
                      email: newemail@example.com
                      nickname: 新昵称
                      avatarUrl: /avatars/new-avatar.jpg
                      updatedAt: "2024-01-01T16:00:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # 对话管理相关接口
  /api/v1/conversations:
    get:
      tags:
        - 对话管理
      summary: 获取对话列表
      description: 🔄 获取当前用户的对话列表（支持分页）
      parameters:
        - name: page
          in: query
          description: 页码，从1开始
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 每页数量
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          description: 对话状态筛选
          schema:
            type: string
            enum: [ACTIVE, ARCHIVED, DELETED]
        - name: sort
          in: query
          description: 排序方式
          schema:
            type: string
            default: lastMessageAt,desc
            example: createdAt,desc
      responses:
        "200":
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          content:
                            type: array
                            items:
                              $ref: "#/components/schemas/Conversation"
                          pagination:
                            $ref: "#/components/schemas/Pagination"
              examples:
                success:
                  summary: 获取成功
                  value:
                    code: 0
                    message: 获取成功
                    data:
                      content:
                        - id: 2001
                          title: 关于焦虑的咨询
                          status: ACTIVE
                          createdAt: "2024-01-01T10:00:00Z"
                          lastMessageAt: "2024-01-01T15:30:00Z"
                          messageCount: 12
                        - id: 2002
                          title: 睡眠问题讨论
                          status: ACTIVE
                          createdAt: "2024-01-01T09:00:00Z"
                          lastMessageAt: "2024-01-01T14:20:00Z"
                          messageCount: 8
                      pagination:
                        page: 1
                        size: 20
                        total: 2
                        totalPages: 1
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - 对话管理
      summary: 创建新对话
      description: 创建一个新的AI对话会话
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 200
                  description: 对话标题，必填
                  example: 新的心理咨询
                metadata:
                  type: object
                  description: 对话元数据，可选
                  example:
                    tags: ["anxiety", "stress"]
                    priority: "normal"
      responses:
        "201":
          description: 创建成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 创建成功
                  value:
                    code: 0
                    message: 对话创建成功
                    data:
                      id: 2003
                      title: 新的心理咨询
                      status: ACTIVE
                      createdAt: "2024-01-01T16:00:00Z"
                      messageCount: 0
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/v1/conversations/{conversationId}:
    get:
      tags:
        - 对话管理
      summary: 获取对话详情
      description: 🔄 获取指定对话的详细信息
      parameters:
        - name: conversationId
          in: path
          required: true
          description: 对话ID
          schema:
            type: integer
            format: int64
            example: 2001
      responses:
        "200":
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 获取成功
                  value:
                    code: 0
                    message: 获取成功
                    data:
                      id: 2001
                      title: 关于焦虑的咨询
                      status: ACTIVE
                      metadata:
                        tags: ["anxiety"]
                      createdAt: "2024-01-01T10:00:00Z"
                      updatedAt: "2024-01-01T15:30:00Z"
                      lastMessageAt: "2024-01-01T15:30:00Z"
                      messageCount: 12
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      tags:
        - 对话管理
      summary: 更新对话信息
      description: 更新对话标题或状态
      parameters:
        - name: conversationId
          in: path
          required: true
          description: 对话ID
          schema:
            type: integer
            format: int64
            example: 2001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  minLength: 1
                  maxLength: 200
                  description: 对话标题
                  example: 更新后的标题
                status:
                  type: string
                  enum: [ACTIVE, ARCHIVED, DELETED]
                  description: 对话状态
                  example: ARCHIVED
                metadata:
                  type: object
                  description: 对话元数据
                  example:
                    tags: ["anxiety", "resolved"]
      responses:
        "200":
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 更新成功
                  value:
                    code: 0
                    message: 更新成功
                    data:
                      id: 2001
                      title: 更新后的标题
                      status: ARCHIVED
                      updatedAt: "2024-01-01T16:30:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      tags:
        - 对话管理
      summary: 删除对话
      description: 🔐 删除指定对话（软删除）
      parameters:
        - name: conversationId
          in: path
          required: true
          description: 对话ID
          schema:
            type: integer
            format: int64
            example: 2001
      responses:
        "200":
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 删除成功
                  value:
                    code: 0
                    message: 对话删除成功
                    data: null
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # 消息管理相关接口
  /api/v1/conversations/{conversationId}/messages:
    get:
      tags:
        - 消息管理
      summary: 获取对话消息
      description: 🔄 获取指定对话的消息列表（支持分页）
      parameters:
        - name: conversationId
          in: path
          required: true
          description: 对话ID
          schema:
            type: integer
            format: int64
            example: 2001
        - name: page
          in: query
          description: 页码，从1开始
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 每页数量
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: messageType
          in: query
          description: 消息类型筛选
          schema:
            type: string
            enum: [USER, AI, SYSTEM]
        - name: sort
          in: query
          description: 排序方式
          schema:
            type: string
            default: createdAt,asc
            example: createdAt,desc
      responses:
        "200":
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          content:
                            type: array
                            items:
                              $ref: "#/components/schemas/Message"
                          pagination:
                            $ref: "#/components/schemas/Pagination"
              examples:
                success:
                  summary: 获取成功
                  value:
                    code: 0
                    message: 获取成功
                    data:
                      content:
                        - id: 3001
                          messageType: USER
                          content: 我最近感到很焦虑，不知道该怎么办
                          createdAt: "2024-01-01T10:00:00Z"
                        - id: 3002
                          messageType: AI
                          content: 我理解您的感受。焦虑是很常见的情绪反应...
                          createdAt: "2024-01-01T10:01:00Z"
                      pagination:
                        page: 1
                        size: 50
                        total: 12
                        totalPages: 1
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      tags:
        - 消息管理
      summary: 发送消息
      description: 🔐 向指定对话发送消息并获取AI回复
      parameters:
        - name: conversationId
          in: path
          required: true
          description: 对话ID
          schema:
            type: integer
            format: int64
            example: 2001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 4000
                  description: 🔐 消息内容，必填
                  example: 我最近工作压力很大，经常失眠
                metadata:
                  type: object
                  description: 消息元数据，可选
                  example:
                    sentiment: "negative"
                    urgency: "normal"
      responses:
        "201":
          description: 消息发送成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 发送成功
                  value:
                    code: 0
                    message: 消息发送成功
                    data:
                      userMessage:
                        id: 3003
                        messageType: USER
                        content: 我最近工作压力很大，经常失眠
                        createdAt: "2024-01-01T16:00:00Z"
                      aiMessage:
                        id: 3004
                        messageType: AI
                        content: 工作压力导致的失眠确实很困扰。让我们一起探讨一些缓解压力和改善睡眠的方法...
                        createdAt: "2024-01-01T16:00:30Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "502":
          $ref: "#/components/responses/BadGateway"

  # 系统配置相关接口
  /api/v1/system/config:
    get:
      tags:
        - 系统管理
      summary: 获取系统配置
      description: 🔄 获取系统配置信息（管理员）
      parameters:
        - name: configKey
          in: query
          description: 配置键名筛选
          schema:
            type: string
            example: ai.model.name
      responses:
        "200":
          description: 获取成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 获取成功
                  value:
                    code: 0
                    message: 获取成功
                    data:
                      - configKey: ai.model.name
                        configValue: gpt-3.5-turbo
                        description: AI模型名称配置
                        configType: STRING
                      - configKey: system.maintenance.enabled
                        configValue: "false"
                        description: 系统维护模式开关
                        configType: BOOLEAN
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      tags:
        - 系统管理
      summary: 更新系统配置
      description: 🔐 更新系统配置（管理员）
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - configKey
                - configValue
              properties:
                configKey:
                  type: string
                  maxLength: 100
                  description: 配置键名，必填
                  example: ai.model.name
                configValue:
                  type: string
                  description: 配置值，必填
                  example: gpt-4
                description:
                  type: string
                  maxLength: 500
                  description: 配置描述，可选
                  example: AI模型名称配置
                configType:
                  type: string
                  enum: [STRING, NUMBER, BOOLEAN, JSON]
                  description: 配置类型，可选，默认STRING
                  example: STRING
      responses:
        "200":
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
              examples:
                success:
                  summary: 更新成功
                  value:
                    code: 0
                    message: 配置更新成功
                    data:
                      configKey: ai.model.name
                      configValue: gpt-4
                      description: AI模型名称配置
                      configType: STRING
                      updatedAt: "2024-01-01T16:30:00Z"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer Token认证

  schemas:
    ApiResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: 响应码，0表示成功，非0表示错误
          example: 0
        message:
          type: string
          description: 响应消息
          example: 操作成功
        data:
          description: 响应数据，可以是任意类型
        timestamp:
          type: string
          format: date-time
          description: 响应时间戳
          example: "2024-01-01T10:00:00Z"

    ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: 错误码
          example: 10001
        message:
          type: string
          description: 错误消息
          example: 请求参数错误
        details:
          type: string
          description: 错误详情
          example: username字段不能为空
        timestamp:
          type: string
          format: date-time
          description: 错误时间戳
          example: "2024-01-01T10:00:00Z"
        path:
          type: string
          description: 请求路径
          example: /api/v1/users

    Pagination:
      type: object
      required:
        - page
        - size
        - total
        - totalPages
      properties:
        page:
          type: integer
          description: 当前页码
          example: 1
        size:
          type: integer
          description: 每页数量
          example: 20
        total:
          type: integer
          format: int64
          description: 总记录数
          example: 100
        totalPages:
          type: integer
          description: 总页数
          example: 5

    User:
      type: object
      required:
        - id
        - username
        - email
        - nickname
        - status
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          description: 用户ID
          example: 1001
        username:
          type: string
          description: 用户名
          example: user001
        email:
          type: string
          format: email
          description: 邮箱地址
          example: user@example.com
        nickname:
          type: string
          description: 用户昵称
          example: 小明
        avatarUrl:
          type: string
          description: 头像URL
          example: /avatars/user001.jpg
        status:
          type: string
          enum: [ACTIVE, INACTIVE, BANNED]
          description: 账户状态
          example: ACTIVE
        createdAt:
          type: string
          format: date-time
          description: 创建时间
          example: "2024-01-01T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
          example: "2024-01-01T10:00:00Z"
        lastLoginAt:
          type: string
          format: date-time
          description: 最后登录时间
          example: "2024-01-01T15:30:00Z"

    Conversation:
      type: object
      required:
        - id
        - title
        - status
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          description: 对话ID
          example: 2001
        title:
          type: string
          description: 对话标题
          example: 关于焦虑的咨询
        status:
          type: string
          enum: [ACTIVE, ARCHIVED, DELETED]
          description: 对话状态
          example: ACTIVE
        metadata:
          type: object
          description: 对话元数据
          example:
            tags: ["anxiety"]
        createdAt:
          type: string
          format: date-time
          description: 创建时间
          example: "2024-01-01T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
          example: "2024-01-01T10:00:00Z"
        lastMessageAt:
          type: string
          format: date-time
          description: 最后消息时间
          example: "2024-01-01T15:30:00Z"
        messageCount:
          type: integer
          description: 消息数量
          example: 12

    Message:
      type: object
      required:
        - id
        - messageType
        - content
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          description: 消息ID
          example: 3001
        messageType:
          type: string
          enum: [USER, AI, SYSTEM]
          description: 消息类型
          example: USER
        content:
          type: string
          description: 消息内容
          example: 我最近感到很焦虑
        metadata:
          type: object
          description: 消息元数据
          example:
            sentiment: "negative"
        createdAt:
          type: string
          format: date-time
          description: 创建时间
          example: "2024-01-01T10:00:00Z"
        isDeleted:
          type: boolean
          description: 是否已删除
          example: false

  responses:
    BadRequest:
      description: 请求参数错误
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            validation_error:
              summary: 参数验证失败
              value:
                code: 10001
                message: 请求参数错误
                details: username字段不能为空
                timestamp: "2024-01-01T10:00:00Z"
                path: /api/v1/users

    Unauthorized:
      description: 未授权访问
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            missing_token:
              summary: 缺少访问令牌
              value:
                code: 10002
                message: 未授权访问
                details: 请提供有效的访问令牌
                timestamp: "2024-01-01T10:00:00Z"
                path: /api/v1/users/profile
            invalid_token:
              summary: 无效访问令牌
              value:
                code: 10002
                message: 未授权访问
                details: 访问令牌已过期或无效
                timestamp: "2024-01-01T10:00:00Z"
                path: /api/v1/users/profile

    Forbidden:
      description: 权限不足
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            insufficient_permissions:
              summary: 权限不足
              value:
                code: 10003
                message: 权限不足
                details: 您没有访问此资源的权限
                timestamp: "2024-01-01T10:00:00Z"
                path: /api/v1/conversations/2001

    NotFound:
      description: 资源不存在
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            resource_not_found:
              summary: 资源不存在
              value:
                code: 10004
                message: 资源不存在
                details: 指定的对话不存在
                timestamp: "2024-01-01T10:00:00Z"
                path: /api/v1/conversations/9999

    Conflict:
      description: 资源冲突
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            duplicate_resource:
              summary: 资源冲突
              value:
                code: 10005
                message: 资源冲突
                details: 用户名已存在
                timestamp: "2024-01-01T10:00:00Z"
                path: /api/v1/auth/register

    InternalServerError:
      description: 服务器内部错误
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            server_error:
              summary: 服务器错误
              value:
                code: 50001
                message: 服务器内部错误
                details: 系统暂时不可用，请稍后重试
                timestamp: "2024-01-01T10:00:00Z"
                path: /api/v1/conversations

    BadGateway:
      description: 外部服务错误
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          examples:
            ai_service_error:
              summary: AI服务错误
              value:
                code: 50002
                message: 外部服务错误
                details: AI服务暂时不可用，请稍后重试
                timestamp: "2024-01-01T10:00:00Z"
                path: /api/v1/conversations/2001/messages

tags:
  - name: 用户认证
    description: 用户注册、登录、登出等认证相关接口
  - name: 用户管理
    description: 用户信息管理相关接口
  - name: 对话管理
    description: AI对话会话管理相关接口
  - name: 消息管理
    description: 对话消息管理相关接口
  - name: 系统管理
    description: 系统配置和管理相关接口
